using UnityEngine;
using com.ootii.Actors.Navigation;
using com.ootii.Cameras;
using com.ootii.Geometry;
using com.ootii.Helpers;
using com.ootii.Messages;
using com.ootii.Actors.AnimationControllers;

#if UNITY_EDITOR
using UnityEditor;
#endif
namespace it.Game.Player.MotionControllers.Motions
{
  [MotionName("Hand right up")]
  public class RightHandUp : MotionControllerMotion
  {

	 public const int PHASE_UNKNOWN = 0;

	 public const int PHASE_START = 32100;
	 public const int STATE_IDLE = 32101;
	 public const int EXIT_START = 32110;

	 private HoldItem _holdItemMotion;

	 public RightHandUp()
		  : base()
	 {
		_Form = -1;
		_Priority = 15;
		_ActionAlias = "Attack";
		mIsStartable = true;

#if UNITY_EDITOR
		if (_EditorAnimatorSMName.Length == 0) { _EditorAnimatorSMName = "RightHandUp"; }
#endif
	 }

	 /// <summary>
	 /// Controller constructor
	 /// </summary>
	 /// <param name="rController">Controller the motion belongs to</param>
	 public RightHandUp(MotionController rController)
		  : base(rController)
	 {
		_Form = -1;
		_Priority = 15;
		_ActionAlias = "Attack";
		mIsStartable = true;

#if UNITY_EDITOR
		if (_EditorAnimatorSMName.Length == 0) { _EditorAnimatorSMName = "RightHandUp"; }
#endif
	 }

	 public override bool TestActivate()
	 {
		if (!mIsStartable)
		{
		  return false;
		}
		if (!mActorController.IsGrounded)
		{
		  return false;
		}
		if (mMotionController._InputSource == null)
		{
		  return false;
		}

		if (_holdItemMotion == null)
		{
		  _holdItemMotion = mMotionController.GetMotion<HoldItem>();
		  if (_holdItemMotion == null)
			 return false;
		}

		if (mMotionController._InputSource.IsPressed(_ActionAlias) && _holdItemMotion.IsHold && _holdItemMotion.HoldenItem.HoldStey == 2)
		{
		  return true;
		}
		return false;
	 }

	 public override bool TestUpdate()
	 {
		if (!_holdItemMotion.IsHold)
		  return false;
		//if (!mMotionController._InputSource.IsPressed(_ActionAlias))
		//{
		//  return false;
		//}
		if (IsInMotionState && mMotionLayer._AnimatorStateID != STATE_HoldItemDown)
		{
		  return true;
		}

		return false;
	 }

	 public override void Deactivate()
	 {
		base.Deactivate();
		if (_holdItemMotion.IsHold)
		  _holdItemMotion.HoldenItem.UnUse();
	 }

	 public override bool Activate(MotionControllerMotion rPrevMotion)
	 {
		mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, PHASE_START, true);
		_holdItemMotion.HoldenItem.Use();


		return base.Activate(rPrevMotion);
	 }
	 public override void Update(float rDeltaTime, int rUpdateIndex)
	 {
		int lStateID = mMotionLayer._AnimatorStateID;
		float lStateTime = mMotionLayer._AnimatorStateNormalizedTime;

		int lTransitionID = mMotionLayer._AnimatorTransitionID;
		float lTransitionTime = mMotionLayer._AnimatorTransitionNormalizedTime;

		if (lStateID != STATE_HoldItemDown)
		{
		  if (!mMotionController._InputSource.IsPressed(_ActionAlias))
		  {
			 mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, EXIT_START, true);

		  }
		}
		if (lStateID == STATE_HoldItemUP && lStateTime > 0.1f)
		{
		  mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, STATE_IDLE, true);


		}
	 }

#if UNITY_EDITOR

	 /// <summary>
	 /// Allow the motion to render it's own GUI
	 /// </summary>
	 public override bool OnInspectorGUI()
	 {
		bool lIsDirty = false;

		if (EditorHelper.IntField("Form Condition", "Optional condition used to only activate this motion if the value matches the current Default Form of the MC. Set to -1 to disable.", Form, mMotionController))
		{
		  lIsDirty = true;
		  Form = EditorHelper.FieldIntValue;
		}

		string lNewActionAlias = EditorGUILayout.TextField(new GUIContent("Action Alias", "Action alias that triggers a climb."), ActionAlias, GUILayout.MinWidth(30));
		if (lNewActionAlias != ActionAlias)
		{
		  lIsDirty = true;
		  ActionAlias = lNewActionAlias;
		}

		return lIsDirty;
	 }

#endif
	 #region Auto-Generated
	 // ************************************ START AUTO GENERATED ************************************

	 /// <summary>
	 /// These declarations go inside the class so you can test for which state
	 /// and transitions are active. Testing hash values is much faster than strings.
	 /// </summary>
	 public int STATE_DefaultEmpty = -1;
	 public int STATE_HoldItemUP = -1;
	 public int STATE_HoldItemUpIdle = -1;
	 public int STATE_HoldItemDown = -1;
	 public int TRANS_AnyState_HoldItemUP = -1;
	 public int TRANS_EntryState_HoldItemUP = -1;
	 public int TRANS_HoldItemUP_HoldItemUpIdle = -1;
	 public int TRANS_HoldItemUP_HoldItemDown = -1;
	 public int TRANS_HoldItemUpIdle_HoldItemDown = -1;

	 /// <summary>
	 /// Determines if we're using auto-generated code
	 /// </summary>
	 public override bool HasAutoGeneratedCode
	 {
		get { return true; }
	 }

	 /// <summary>
	 /// Used to determine if the actor is in one of the states for this motion
	 /// </summary>
	 /// <returns></returns>
	 public override bool IsInMotionState
	 {
		get
		{
		  int lStateID = mMotionLayer._AnimatorStateID;
		  int lTransitionID = mMotionLayer._AnimatorTransitionID;

		  if (lTransitionID == 0)
		  {
			 if (lStateID == STATE_DefaultEmpty) { return true; }
			 if (lStateID == STATE_HoldItemUP) { return true; }
			 if (lStateID == STATE_HoldItemUpIdle) { return true; }
			 if (lStateID == STATE_HoldItemDown) { return true; }
		  }

		  if (lTransitionID == TRANS_AnyState_HoldItemUP) { return true; }
		  if (lTransitionID == TRANS_EntryState_HoldItemUP) { return true; }
		  if (lTransitionID == TRANS_HoldItemUP_HoldItemUpIdle) { return true; }
		  if (lTransitionID == TRANS_HoldItemUP_HoldItemDown) { return true; }
		  if (lTransitionID == TRANS_HoldItemUpIdle_HoldItemDown) { return true; }
		  return false;
		}
	 }

	 /// <summary>
	 /// Used to determine if the actor is in one of the states for this motion
	 /// </summary>
	 /// <returns></returns>
	 public override bool IsMotionState(int rStateID)
	 {
		if (rStateID == STATE_DefaultEmpty) { return true; }
		if (rStateID == STATE_HoldItemUP) { return true; }
		if (rStateID == STATE_HoldItemUpIdle) { return true; }
		if (rStateID == STATE_HoldItemDown) { return true; }
		return false;
	 }

	 /// <summary>
	 /// Used to determine if the actor is in one of the states for this motion
	 /// </summary>
	 /// <returns></returns>
	 public override bool IsMotionState(int rStateID, int rTransitionID)
	 {
		if (rTransitionID == 0)
		{
		  if (rStateID == STATE_DefaultEmpty) { return true; }
		  if (rStateID == STATE_HoldItemUP) { return true; }
		  if (rStateID == STATE_HoldItemUpIdle) { return true; }
		  if (rStateID == STATE_HoldItemDown) { return true; }
		}

		if (rTransitionID == TRANS_AnyState_HoldItemUP) { return true; }
		if (rTransitionID == TRANS_EntryState_HoldItemUP) { return true; }
		if (rTransitionID == TRANS_HoldItemUP_HoldItemUpIdle) { return true; }
		if (rTransitionID == TRANS_HoldItemUP_HoldItemDown) { return true; }
		if (rTransitionID == TRANS_HoldItemUpIdle_HoldItemDown) { return true; }
		return false;
	 }

	 /// <summary>
	 /// Preprocess any animator data so the motion can use it later
	 /// </summary>
	 public override void LoadAnimatorData()
	 {
		string lLayer = mMotionController.Animator.GetLayerName(mMotionLayer._AnimatorLayerIndex);
		TRANS_AnyState_HoldItemUP = mMotionController.AddAnimatorName("AnyState -> " + lLayer + ".RightHandUp.HoldItemUP");
		TRANS_EntryState_HoldItemUP = mMotionController.AddAnimatorName("Entry -> " + lLayer + ".RightHandUp.HoldItemUP");
		STATE_DefaultEmpty = mMotionController.AddAnimatorName("" + lLayer + ".Default Empty");
		STATE_HoldItemUP = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemUP");
		TRANS_HoldItemUP_HoldItemUpIdle = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemUP -> " + lLayer + ".RightHandUp.HoldItemUpIdle");
		TRANS_HoldItemUP_HoldItemDown = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemUP -> " + lLayer + ".RightHandUp.HoldItemDown");
		STATE_HoldItemUpIdle = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemUpIdle");
		TRANS_HoldItemUpIdle_HoldItemDown = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemUpIdle -> " + lLayer + ".RightHandUp.HoldItemDown");
		STATE_HoldItemDown = mMotionController.AddAnimatorName("" + lLayer + ".RightHandUp.HoldItemDown");
	 }

#if UNITY_EDITOR

	 /// <summary>
	 /// New way to create sub-state machines without destroying what exists first.
	 /// </summary>
	 protected override void CreateStateMachine()
	 {
		int rLayerIndex = mMotionLayer._AnimatorLayerIndex;
		MotionController rMotionController = mMotionController;

		UnityEditor.Animations.AnimatorController lController = null;

		Animator lAnimator = rMotionController.Animator;
		if (lAnimator == null) { lAnimator = rMotionController.gameObject.GetComponent<Animator>(); }
		if (lAnimator != null) { lController = lAnimator.runtimeAnimatorController as UnityEditor.Animations.AnimatorController; }
		if (lController == null) { return; }

		while (lController.layers.Length <= rLayerIndex)
		{
		  UnityEditor.Animations.AnimatorControllerLayer lNewLayer = new UnityEditor.Animations.AnimatorControllerLayer();
		  lNewLayer.name = "Layer " + (lController.layers.Length + 1);
		  lNewLayer.stateMachine = new UnityEditor.Animations.AnimatorStateMachine();
		  lController.AddLayer(lNewLayer);
		}

		UnityEditor.Animations.AnimatorControllerLayer lLayer = lController.layers[rLayerIndex];

		UnityEditor.Animations.AnimatorStateMachine lLayerStateMachine = lLayer.stateMachine;

		UnityEditor.Animations.AnimatorStateMachine lSSM_867612 = MotionControllerMotion.EditorFindSSM(lLayerStateMachine, "RightHandUp");
		if (lSSM_867612 == null) { lSSM_867612 = lLayerStateMachine.AddStateMachine("RightHandUp", new Vector3(420, 90, 0)); }

		UnityEditor.Animations.AnimatorState lState_N2824438 = MotionControllerMotion.EditorFindState(lSSM_867612, "HoldItemUP");
		if (lState_N2824438 == null) { lState_N2824438 = lSSM_867612.AddState("HoldItemUP", new Vector3(320, -100, 0)); }
		lState_N2824438.speed = 1f;
		lState_N2824438.mirror = false;
		lState_N2824438.tag = "";
		lState_N2824438.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/NineAnimations/HoldItems/HoldItemUP.anim", "HoldItemUP");

		UnityEditor.Animations.AnimatorState lState_N2824472 = MotionControllerMotion.EditorFindState(lSSM_867612, "HoldItemUpIdle");
		if (lState_N2824472 == null) { lState_N2824472 = lSSM_867612.AddState("HoldItemUpIdle", new Vector3(570, -100, 0)); }
		lState_N2824472.speed = 1f;
		lState_N2824472.mirror = false;
		lState_N2824472.tag = "";
		lState_N2824472.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/NineAnimations/HoldItems/HoldItemUpIdle.anim", "HoldItemUpIdle");

		UnityEditor.Animations.AnimatorState lState_N2860898 = MotionControllerMotion.EditorFindState(lSSM_867612, "HoldItemDown");
		if (lState_N2860898 == null) { lState_N2860898 = lSSM_867612.AddState("HoldItemDown", new Vector3(460, -20, 0)); }
		lState_N2860898.speed = -1f;
		lState_N2860898.mirror = false;
		lState_N2860898.tag = "";
		lState_N2860898.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/NineAnimations/HoldItems/HoldItemUP.anim", "HoldItemUP");

		UnityEditor.Animations.AnimatorStateTransition lAnyTransition_N2826094 = MotionControllerMotion.EditorFindAnyStateTransition(lLayerStateMachine, lState_N2824438, 0);
		if (lAnyTransition_N2826094 == null) { lAnyTransition_N2826094 = lLayerStateMachine.AddAnyStateTransition(lState_N2824438); }
		lAnyTransition_N2826094.isExit = false;
		lAnyTransition_N2826094.hasExitTime = false;
		lAnyTransition_N2826094.hasFixedDuration = true;
		lAnyTransition_N2826094.exitTime = 0.75f;
		lAnyTransition_N2826094.duration = 0.25f;
		lAnyTransition_N2826094.offset = 0f;
		lAnyTransition_N2826094.mute = false;
		lAnyTransition_N2826094.solo = false;
		lAnyTransition_N2826094.canTransitionToSelf = true;
		lAnyTransition_N2826094.orderedInterruption = true;
		lAnyTransition_N2826094.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
		for (int i = lAnyTransition_N2826094.conditions.Length - 1; i >= 0; i--) { lAnyTransition_N2826094.RemoveCondition(lAnyTransition_N2826094.conditions[i]); }
		lAnyTransition_N2826094.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Equals, 32100f, "L" + rLayerIndex + "MotionPhase");

		UnityEditor.Animations.AnimatorStateTransition lTransition_N2834020 = MotionControllerMotion.EditorFindTransition(lState_N2824438, lState_N2824472, 0);
		if (lTransition_N2834020 == null) { lTransition_N2834020 = lState_N2824438.AddTransition(lState_N2824472); }
		lTransition_N2834020.isExit = false;
		lTransition_N2834020.hasExitTime = true;
		lTransition_N2834020.hasFixedDuration = true;
		lTransition_N2834020.exitTime = 0.9384302f;
		lTransition_N2834020.duration = 0.0322313f;
		lTransition_N2834020.offset = 0.01404971f;
		lTransition_N2834020.mute = false;
		lTransition_N2834020.solo = false;
		lTransition_N2834020.canTransitionToSelf = true;
		lTransition_N2834020.orderedInterruption = true;
		lTransition_N2834020.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
		for (int i = lTransition_N2834020.conditions.Length - 1; i >= 0; i--) { lTransition_N2834020.RemoveCondition(lTransition_N2834020.conditions[i]); }

		UnityEditor.Animations.AnimatorStateTransition lTransition_N2889612 = MotionControllerMotion.EditorFindTransition(lState_N2824438, lState_N2860898, 0);
		if (lTransition_N2889612 == null) { lTransition_N2889612 = lState_N2824438.AddTransition(lState_N2860898); }
		lTransition_N2889612.isExit = false;
		lTransition_N2889612.hasExitTime = false;
		lTransition_N2889612.hasFixedDuration = true;
		lTransition_N2889612.exitTime = 0.03539939f;
		lTransition_N2889612.duration = 0.3177686f;
		lTransition_N2889612.offset = 0.03953154f;
		lTransition_N2889612.mute = false;
		lTransition_N2889612.solo = false;
		lTransition_N2889612.canTransitionToSelf = true;
		lTransition_N2889612.orderedInterruption = true;
		lTransition_N2889612.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
		for (int i = lTransition_N2889612.conditions.Length - 1; i >= 0; i--) { lTransition_N2889612.RemoveCondition(lTransition_N2889612.conditions[i]); }
		lTransition_N2889612.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Greater, 32110f, "L" + rLayerIndex + "MotionPhase");

		UnityEditor.Animations.AnimatorStateTransition lTransition_N2860924 = MotionControllerMotion.EditorFindTransition(lState_N2824472, lState_N2860898, 0);
		if (lTransition_N2860924 == null) { lTransition_N2860924 = lState_N2824472.AddTransition(lState_N2860898); }
		lTransition_N2860924.isExit = false;
		lTransition_N2860924.hasExitTime = false;
		lTransition_N2860924.hasFixedDuration = true;
		lTransition_N2860924.exitTime = 0.8627183f;
		lTransition_N2860924.duration = 0.3188705f;
		lTransition_N2860924.offset = 0f;
		lTransition_N2860924.mute = false;
		lTransition_N2860924.solo = false;
		lTransition_N2860924.canTransitionToSelf = true;
		lTransition_N2860924.orderedInterruption = true;
		lTransition_N2860924.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
		for (int i = lTransition_N2860924.conditions.Length - 1; i >= 0; i--) { lTransition_N2860924.RemoveCondition(lTransition_N2860924.conditions[i]); }
		lTransition_N2860924.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Equals, 32110f, "L" + rLayerIndex + "MotionPhase");


		// Run any post processing after creating the state machine
		OnStateMachineCreated();
	 }

#endif

	 // ************************************ END AUTO GENERATED ************************************
	 #endregion


  }
}
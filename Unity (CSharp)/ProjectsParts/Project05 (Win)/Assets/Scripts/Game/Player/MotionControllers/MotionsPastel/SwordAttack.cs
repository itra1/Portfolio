using UnityEngine;
using com.ootii.Actors.AnimationControllers;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace it.Game.Player.MotionControllers.Motions
{
  [MotionName("Sword Attack")]
  public class SwordAttack : MotionControllerMotion
  {
	 public const int PHASE_UNKNOWN = 0;
	 public const int PHASE_ATTACK_FORWARD = 312000;
    public const int PHASE_ATTACK_LEFT = 312001;
    public const int PHASE_ATTACK_RIGHT = 312002;
    private HoldItem _holdItemMotion;
	 private Aiming _aiming;

    private it.Game.Items.Katana _katana;

    public SwordAttack()
		  : base()
	 {
		_Pack = Idle.GroupName();
		_Category = EnumMotionCategories.AIMING;

		_Priority = 100;
		_ActionAlias = "Attack";
		_OverrideLayers = true;

#if UNITY_EDITOR
		if (_EditorAnimatorSMName.Length == 0) { _EditorAnimatorSMName = "SwordAttack"; }
#endif
	 }

	 /// <summary>
	 /// Controller constructor
	 /// </summary>
	 /// <param name="rController">Controller the motion belongs to</param>
	 public SwordAttack(MotionController rController)
		  : base(rController)
	 {
		_Pack = Idle.GroupName();
		_Category = EnumMotionCategories.AIMING;

		_Priority = 100;
		_ActionAlias = "Attack";

#if UNITY_EDITOR
		if (_EditorAnimatorSMName.Length == 0) { _EditorAnimatorSMName = "SwordAttack"; }
#endif
	 }
    public override bool TestUpdate()
    {
      if (IsInMotionState)
        return true;

      return false;
    }

	 public override void Deactivate()
	 {
		base.Deactivate();

      if(_holdItemMotion.IsHold)
        _holdItemMotion.HoldenItem.UnUse();

      if (_katana == null)
        _katana.SetAttackStop();
    }

	 public override bool TestActivate()
	 {
		if (!mIsStartable) { return false; }
		if (!mMotionController.IsGrounded) { return false; }

		if (_holdItemMotion == null)
        _holdItemMotion = mMotionController.GetMotion<HoldItem>();
		if (_aiming == null)
		  _aiming = mMotionController.GetMotion<Aiming>();

		if (_holdItemMotion.HoldenItem != null && _holdItemMotion.HoldenItem.HoldStey == 1)
		{
        if (_katana == null)
          _katana = _holdItemMotion.HoldenItem.GetComponent<it.Game.Items.Katana>();

        if (mMotionController._InputSource.IsPressed(_ActionAlias))
			 return true;
		}

		return false;
	 }
	 public override bool Activate(MotionControllerMotion rPrevMotion)
    {
      if (_katana == null)
        _katana.SetAttackStart();

      _holdItemMotion.HoldenItem.Use();
      if (mMotionController.State.InputX < 0)
        mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, PHASE_ATTACK_LEFT, 0, true);
      else if (mMotionController.State.InputX > 0)
        mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, PHASE_ATTACK_RIGHT, 0, true);
      else
        mMotionController.SetAnimatorMotionPhase(mMotionLayer._AnimatorLayerIndex, PHASE_ATTACK_FORWARD, 0, true);


      // Return
      return base.Activate(rPrevMotion);
	 }

    #region Auto-Generated
    // ************************************ START AUTO GENERATED ************************************

    /// <summary>
    /// These declarations go inside the class so you can test for which state
    /// and transitions are active. Testing hash values is much faster than strings.
    /// </summary>
    public int STATE_Start = -1;
    public int STATE_2H_swing_high_straight_down = -1;
    public int STATE_2H_swing_high_right = -1;
    public int STATE_2H_swing_high_left = -1;
    public int TRANS_AnyState_2H_swing_high_straight_down = -1;
    public int TRANS_EntryState_2H_swing_high_straight_down = -1;
    public int TRANS_AnyState_2H_swing_high_right = -1;
    public int TRANS_EntryState_2H_swing_high_right = -1;
    public int TRANS_AnyState_2H_swing_high_left = -1;
    public int TRANS_EntryState_2H_swing_high_left = -1;

    /// <summary>
    /// Determines if we're using auto-generated code
    /// </summary>
    public override bool HasAutoGeneratedCode
    {
      get { return true; }
    }

    /// <summary>
    /// Used to determine if the actor is in one of the states for this motion
    /// </summary>
    /// <returns></returns>
    public override bool IsInMotionState
    {
      get
      {
        int lStateID = mMotionLayer._AnimatorStateID;
        int lTransitionID = mMotionLayer._AnimatorTransitionID;

        if (lTransitionID == 0)
        {
          //if (lStateID == STATE_Start) { return true; }
          if (lStateID == STATE_2H_swing_high_straight_down) { return true; }
          if (lStateID == STATE_2H_swing_high_right) { return true; }
          if (lStateID == STATE_2H_swing_high_left) { return true; }
        }

        if (lTransitionID == TRANS_AnyState_2H_swing_high_straight_down) { return true; }
        if (lTransitionID == TRANS_EntryState_2H_swing_high_straight_down) { return true; }
        if (lTransitionID == TRANS_AnyState_2H_swing_high_right) { return true; }
        if (lTransitionID == TRANS_EntryState_2H_swing_high_right) { return true; }
        if (lTransitionID == TRANS_AnyState_2H_swing_high_left) { return true; }
        if (lTransitionID == TRANS_EntryState_2H_swing_high_left) { return true; }
        return false;
      }
    }

    /// <summary>
    /// Used to determine if the actor is in one of the states for this motion
    /// </summary>
    /// <returns></returns>
    public override bool IsMotionState(int rStateID)
    {
      //if (rStateID == STATE_Start) { return true; }
      if (rStateID == STATE_2H_swing_high_straight_down) { return true; }
      if (rStateID == STATE_2H_swing_high_right) { return true; }
      if (rStateID == STATE_2H_swing_high_left) { return true; }
      return false;
    }

    /// <summary>
    /// Used to determine if the actor is in one of the states for this motion
    /// </summary>
    /// <returns></returns>
    public override bool IsMotionState(int rStateID, int rTransitionID)
    {
      if (rTransitionID == 0)
      {
        //if (rStateID == STATE_Start) { return true; }
        if (rStateID == STATE_2H_swing_high_straight_down) { return true; }
        if (rStateID == STATE_2H_swing_high_right) { return true; }
        if (rStateID == STATE_2H_swing_high_left) { return true; }
      }

      if (rTransitionID == TRANS_AnyState_2H_swing_high_straight_down) { return true; }
      if (rTransitionID == TRANS_EntryState_2H_swing_high_straight_down) { return true; }
      if (rTransitionID == TRANS_AnyState_2H_swing_high_right) { return true; }
      if (rTransitionID == TRANS_EntryState_2H_swing_high_right) { return true; }
      if (rTransitionID == TRANS_AnyState_2H_swing_high_left) { return true; }
      if (rTransitionID == TRANS_EntryState_2H_swing_high_left) { return true; }
      return false;
    }

    /// <summary>
    /// Preprocess any animator data so the motion can use it later
    /// </summary>
    public override void LoadAnimatorData()
    {
      string lLayer = mMotionController.Animator.GetLayerName(mMotionLayer._AnimatorLayerIndex);
      TRANS_AnyState_2H_swing_high_straight_down = mMotionController.AddAnimatorName("AnyState -> " + lLayer + ".SwordAttack.2H_swing_high_straight_down");
      TRANS_EntryState_2H_swing_high_straight_down = mMotionController.AddAnimatorName("Entry -> " + lLayer + ".SwordAttack.2H_swing_high_straight_down");
      TRANS_AnyState_2H_swing_high_right = mMotionController.AddAnimatorName("AnyState -> " + lLayer + ".SwordAttack.2H_swing_high_right");
      TRANS_EntryState_2H_swing_high_right = mMotionController.AddAnimatorName("Entry -> " + lLayer + ".SwordAttack.2H_swing_high_right");
      TRANS_AnyState_2H_swing_high_left = mMotionController.AddAnimatorName("AnyState -> " + lLayer + ".SwordAttack.2H_swing_high_left");
      TRANS_EntryState_2H_swing_high_left = mMotionController.AddAnimatorName("Entry -> " + lLayer + ".SwordAttack.2H_swing_high_left");
      //STATE_Start = mMotionController.AddAnimatorName("" + lLayer + ".Start");
      STATE_2H_swing_high_straight_down = mMotionController.AddAnimatorName("" + lLayer + ".SwordAttack.2H_swing_high_straight_down");
      STATE_2H_swing_high_right = mMotionController.AddAnimatorName("" + lLayer + ".SwordAttack.2H_swing_high_right");
      STATE_2H_swing_high_left = mMotionController.AddAnimatorName("" + lLayer + ".SwordAttack.2H_swing_high_left");
    }

#if UNITY_EDITOR

    /// <summary>
    /// New way to create sub-state machines without destroying what exists first.
    /// </summary>
    protected override void CreateStateMachine()
    {
      int rLayerIndex = mMotionLayer._AnimatorLayerIndex;
      MotionController rMotionController = mMotionController;

      UnityEditor.Animations.AnimatorController lController = null;

      Animator lAnimator = rMotionController.Animator;
      if (lAnimator == null) { lAnimator = rMotionController.gameObject.GetComponent<Animator>(); }
      if (lAnimator != null) { lController = lAnimator.runtimeAnimatorController as UnityEditor.Animations.AnimatorController; }
      if (lController == null) { return; }

      while (lController.layers.Length <= rLayerIndex)
      {
        UnityEditor.Animations.AnimatorControllerLayer lNewLayer = new UnityEditor.Animations.AnimatorControllerLayer();
        lNewLayer.name = "Layer " + (lController.layers.Length + 1);
        lNewLayer.stateMachine = new UnityEditor.Animations.AnimatorStateMachine();
        lController.AddLayer(lNewLayer);
      }

      UnityEditor.Animations.AnimatorControllerLayer lLayer = lController.layers[rLayerIndex];

      UnityEditor.Animations.AnimatorStateMachine lLayerStateMachine = lLayer.stateMachine;

      UnityEditor.Animations.AnimatorStateMachine lSSM_N3030522 = MotionControllerMotion.EditorFindSSM(lLayerStateMachine, "SwordAttack");
      if (lSSM_N3030522 == null) { lSSM_N3030522 = lLayerStateMachine.AddStateMachine("SwordAttack", new Vector3(1330, -300, 0)); }

      UnityEditor.Animations.AnimatorState lState_N3032246 = MotionControllerMotion.EditorFindState(lSSM_N3030522, "2H_swing_high_straight_down");
      if (lState_N3032246 == null) { lState_N3032246 = lSSM_N3030522.AddState("2H_swing_high_straight_down", new Vector3(436.5f, -29, 0)); }
      lState_N3032246.speed = 1f;
      lState_N3032246.mirror = false;
      lState_N3032246.tag = "";
      lState_N3032246.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/Animations/Result/SwordMotions.fbx", "2H_swing_high_straight_down");

      UnityEditor.Animations.AnimatorState lState_N3032258 = MotionControllerMotion.EditorFindState(lSSM_N3030522, "2H_swing_high_right");
      if (lState_N3032258 == null) { lState_N3032258 = lSSM_N3030522.AddState("2H_swing_high_right", new Vector3(440, 40, 0)); }
      lState_N3032258.speed = 1f;
      lState_N3032258.mirror = false;
      lState_N3032258.tag = "";
      lState_N3032258.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/Animations/Result/SwordMotions.fbx", "2H_swing_high_right");

      UnityEditor.Animations.AnimatorState lState_N3032272 = MotionControllerMotion.EditorFindState(lSSM_N3030522, "2H_swing_high_left");
      if (lState_N3032272 == null) { lState_N3032272 = lSSM_N3030522.AddState("2H_swing_high_left", new Vector3(440, 100, 0)); }
      lState_N3032272.speed = 1f;
      lState_N3032272.mirror = false;
      lState_N3032272.tag = "";
      lState_N3032272.motion = MotionControllerMotion.EditorFindAnimationClip("Assets/Content/Models/Pastel/Animations/Result/SwordMotions.fbx", "2H_swing_high_left");

      UnityEditor.Animations.AnimatorStateTransition lAnyTransition_N3032300 = MotionControllerMotion.EditorFindAnyStateTransition(lLayerStateMachine, lState_N3032246, 0);
      if (lAnyTransition_N3032300 == null) { lAnyTransition_N3032300 = lLayerStateMachine.AddAnyStateTransition(lState_N3032246); }
      lAnyTransition_N3032300.isExit = false;
      lAnyTransition_N3032300.hasExitTime = false;
      lAnyTransition_N3032300.hasFixedDuration = true;
      lAnyTransition_N3032300.exitTime = 0.75f;
      lAnyTransition_N3032300.duration = 0.25f;
      lAnyTransition_N3032300.offset = 0f;
      lAnyTransition_N3032300.mute = false;
      lAnyTransition_N3032300.solo = false;
      lAnyTransition_N3032300.canTransitionToSelf = false;
      lAnyTransition_N3032300.orderedInterruption = true;
      lAnyTransition_N3032300.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
      for (int i = lAnyTransition_N3032300.conditions.Length - 1; i >= 0; i--) { lAnyTransition_N3032300.RemoveCondition(lAnyTransition_N3032300.conditions[i]); }
      lAnyTransition_N3032300.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Equals, 312000f, "L" + rLayerIndex + "MotionPhase");
      lAnyTransition_N3032300.AddCondition(UnityEditor.Animations.AnimatorConditionMode.If, 0f, "IsGrounded");

      UnityEditor.Animations.AnimatorStateTransition lAnyTransition_N3032332 = MotionControllerMotion.EditorFindAnyStateTransition(lLayerStateMachine, lState_N3032258, 0);
      if (lAnyTransition_N3032332 == null) { lAnyTransition_N3032332 = lLayerStateMachine.AddAnyStateTransition(lState_N3032258); }
      lAnyTransition_N3032332.isExit = false;
      lAnyTransition_N3032332.hasExitTime = false;
      lAnyTransition_N3032332.hasFixedDuration = true;
      lAnyTransition_N3032332.exitTime = 0.75f;
      lAnyTransition_N3032332.duration = 0.25f;
      lAnyTransition_N3032332.offset = 0f;
      lAnyTransition_N3032332.mute = false;
      lAnyTransition_N3032332.solo = false;
      lAnyTransition_N3032332.canTransitionToSelf = false;
      lAnyTransition_N3032332.orderedInterruption = true;
      lAnyTransition_N3032332.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
      for (int i = lAnyTransition_N3032332.conditions.Length - 1; i >= 0; i--) { lAnyTransition_N3032332.RemoveCondition(lAnyTransition_N3032332.conditions[i]); }
      lAnyTransition_N3032332.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Equals, 312001f, "L" + rLayerIndex + "MotionPhase");
      lAnyTransition_N3032332.AddCondition(UnityEditor.Animations.AnimatorConditionMode.If, 0f, "Aiming");

      UnityEditor.Animations.AnimatorStateTransition lAnyTransition_N3032364 = MotionControllerMotion.EditorFindAnyStateTransition(lLayerStateMachine, lState_N3032272, 0);
      if (lAnyTransition_N3032364 == null) { lAnyTransition_N3032364 = lLayerStateMachine.AddAnyStateTransition(lState_N3032272); }
      lAnyTransition_N3032364.isExit = false;
      lAnyTransition_N3032364.hasExitTime = false;
      lAnyTransition_N3032364.hasFixedDuration = true;
      lAnyTransition_N3032364.exitTime = 0.75f;
      lAnyTransition_N3032364.duration = 0.25f;
      lAnyTransition_N3032364.offset = 0f;
      lAnyTransition_N3032364.mute = false;
      lAnyTransition_N3032364.solo = false;
      lAnyTransition_N3032364.canTransitionToSelf = true;
      lAnyTransition_N3032364.orderedInterruption = true;
      lAnyTransition_N3032364.interruptionSource = (UnityEditor.Animations.TransitionInterruptionSource)0;
      for (int i = lAnyTransition_N3032364.conditions.Length - 1; i >= 0; i--) { lAnyTransition_N3032364.RemoveCondition(lAnyTransition_N3032364.conditions[i]); }
      lAnyTransition_N3032364.AddCondition(UnityEditor.Animations.AnimatorConditionMode.Equals, 312002f, "L" + rLayerIndex + "MotionPhase");
      lAnyTransition_N3032364.AddCondition(UnityEditor.Animations.AnimatorConditionMode.If, 0f, "Aiming");


      // Run any post processing after creating the state machine
      OnStateMachineCreated();
    }

#endif

    // ************************************ END AUTO GENERATED ************************************
    #endregion

#if UNITY_EDITOR

    public override bool OnInspectorGUI()
    {
      bool lIsDirty = false;


      string lNewActionAlias = EditorGUILayout.TextField(new GUIContent("Action Alias", "Action alias that triggers a climb."), ActionAlias, GUILayout.MinWidth(30));
      if (lNewActionAlias != ActionAlias)
      {
        lIsDirty = true;
        ActionAlias = lNewActionAlias;
      }

      return lIsDirty;
    }
#endif

  }
}